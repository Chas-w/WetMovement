//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Wet_Proto/WETInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WETInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WETInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WETInput"",
    ""maps"": [
        {
            ""name"": ""Swim"",
            ""id"": ""febc788f-6780-42a3-a5b2-217c779aeffd"",
            ""actions"": [
                {
                    ""name"": ""VertToggle"",
                    ""type"": ""Button"",
                    ""id"": ""8f887187-f5c2-4334-8c79-c285fc6fe3c9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ce162dc8-ea2a-4aae-a12b-4fb89d04fbae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestKey"",
                    ""type"": ""Button"",
                    ""id"": ""6aecacca-11b9-402e-b2c7-ce42159b884a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f70ae5f8-56fa-4516-acb8-0d7d7e68b03b"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afc4eb6c-8b1a-4e96-aeac-2b7c26f3ea72"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3babf56e-cc43-4f07-988c-e5ade1ec82b3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3492977a-df0a-4808-a4af-edd80d5e03b2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""adba5ce4-1900-45e9-bd0d-644e974526d5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""72488cc8-fb75-48fe-bb12-e11cce715716"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""08027da1-f6c7-4249-816e-2d2cd0660bd0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""18591cd1-8ad1-411a-bd9a-26877bd5acea"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Swim
        m_Swim = asset.FindActionMap("Swim", throwIfNotFound: true);
        m_Swim_VertToggle = m_Swim.FindAction("VertToggle", throwIfNotFound: true);
        m_Swim_Move = m_Swim.FindAction("Move", throwIfNotFound: true);
        m_Swim_TestKey = m_Swim.FindAction("TestKey", throwIfNotFound: true);
    }

    ~@WETInput()
    {
        UnityEngine.Debug.Assert(!m_Swim.enabled, "This will cause a leak and performance issues, WETInput.Swim.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Swim
    private readonly InputActionMap m_Swim;
    private List<ISwimActions> m_SwimActionsCallbackInterfaces = new List<ISwimActions>();
    private readonly InputAction m_Swim_VertToggle;
    private readonly InputAction m_Swim_Move;
    private readonly InputAction m_Swim_TestKey;
    public struct SwimActions
    {
        private @WETInput m_Wrapper;
        public SwimActions(@WETInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @VertToggle => m_Wrapper.m_Swim_VertToggle;
        public InputAction @Move => m_Wrapper.m_Swim_Move;
        public InputAction @TestKey => m_Wrapper.m_Swim_TestKey;
        public InputActionMap Get() { return m_Wrapper.m_Swim; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwimActions set) { return set.Get(); }
        public void AddCallbacks(ISwimActions instance)
        {
            if (instance == null || m_Wrapper.m_SwimActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwimActionsCallbackInterfaces.Add(instance);
            @VertToggle.started += instance.OnVertToggle;
            @VertToggle.performed += instance.OnVertToggle;
            @VertToggle.canceled += instance.OnVertToggle;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @TestKey.started += instance.OnTestKey;
            @TestKey.performed += instance.OnTestKey;
            @TestKey.canceled += instance.OnTestKey;
        }

        private void UnregisterCallbacks(ISwimActions instance)
        {
            @VertToggle.started -= instance.OnVertToggle;
            @VertToggle.performed -= instance.OnVertToggle;
            @VertToggle.canceled -= instance.OnVertToggle;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @TestKey.started -= instance.OnTestKey;
            @TestKey.performed -= instance.OnTestKey;
            @TestKey.canceled -= instance.OnTestKey;
        }

        public void RemoveCallbacks(ISwimActions instance)
        {
            if (m_Wrapper.m_SwimActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwimActions instance)
        {
            foreach (var item in m_Wrapper.m_SwimActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwimActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwimActions @Swim => new SwimActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ISwimActions
    {
        void OnVertToggle(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnTestKey(InputAction.CallbackContext context);
    }
}
